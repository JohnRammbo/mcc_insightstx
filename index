<!DOCTYPE html>

<html lang="es">

<head>

    <meta charset="UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>An√°lisis MCC - Comercios No Afiliados</title>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.4.1/papaparse.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.0/chart.umd.js"></script>

    <style>

        body {

            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;

            margin: 0;

            padding: 20px;

            background-color: #f5f5f5;

        }

        .container {

            max-width: 1400px;

            margin: 0 auto;

            background: white;

            padding: 30px;

            border-radius: 10px;

            box-shadow: 0 2px 10px rgba(0,0,0,0.1);

        }

        h1, h2, h3 {

            color: #333;

        }

        .upload-area {

            border: 2px dashed #ccc;

            border-radius: 8px;

            padding: 40px;

            text-align: center;

            margin: 20px 0;

            background: #f9f9f9;

            cursor: pointer;

            transition: all 0.3s;

        }

        .upload-area:hover {

            border-color: #007bff;

            background: #f0f7ff;

        }

        .upload-area.dragging {

            border-color: #28a745;

            background: #e8f5e9;

        }

        .metrics-grid {

            display: grid;

            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));

            gap: 20px;

            margin: 30px 0;

        }

        .metric-card {

            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);

            color: white;

            padding: 25px;

            border-radius: 8px;

            box-shadow: 0 4px 6px rgba(0,0,0,0.1);

        }

        .metric-card h3 {

            margin: 0 0 10px 0;

            font-size: 18px;

            color: white;

            opacity: 0.9;

        }

        .metric-card .value {

            font-size: 32px;

            font-weight: bold;

        }

        .metric-card.orange {

            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);

        }

        .metric-card.green {

            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);

        }

        .metric-card.purple {

            background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);

        }

        table {

            width: 100%;

            border-collapse: collapse;

            margin: 20px 0;

            font-size: 14px;

        }

        th, td {

            padding: 12px;

            text-align: left;

            border-bottom: 1px solid #e0e0e0;

        }

        th {

            background-color: #f8f9fa;

            font-weight: 600;

            color: #495057;

            position: sticky;

            top: 0;

            z-index: 10;

        }

        tr:hover {

            background-color: #f8f9fa;

        }

        .chart-container {

            position: relative;

            height: 400px;

            margin: 30px 0;

        }

        .insights-section {

            background: #f8f9fa;

            padding: 25px;

            border-radius: 8px;

            margin: 30px 0;

        }

        .insight-item {

            margin: 15px 0;

            padding: 15px;

            background: white;

            border-radius: 6px;

            border-left: 4px solid #007bff;

        }

        .tabs {

            display: flex;

            border-bottom: 2px solid #e0e0e0;

            margin: 30px 0 20px 0;

        }

        .tab {

            padding: 12px 24px;

            cursor: pointer;

            border: none;

            background: none;

            font-size: 16px;

            color: #666;

            transition: all 0.3s;

        }

        .tab.active {

            color: #007bff;

            border-bottom: 2px solid #007bff;

            margin-bottom: -2px;

        }

        .tab-content {

            display: none;

            animation: fadeIn 0.5s;

        }

        .tab-content.active {

            display: block;

        }

        @keyframes fadeIn {

            from { opacity: 0; }

            to { opacity: 1; }

        }

        .search-box {

            margin: 20px 0;

            position: relative;

        }

        .search-box input {

            width: 100%;

            padding: 12px 40px 12px 16px;

            border: 1px solid #ddd;

            border-radius: 6px;

            font-size: 16px;

        }

        .loading {

            text-align: center;

            padding: 40px;

            color: #666;

        }

        .spinner {

            border: 3px solid #f3f3f3;

            border-top: 3px solid #007bff;

            border-radius: 50%;

            width: 40px;

            height: 40px;

            animation: spin 1s linear infinite;

            margin: 20px auto;

        }

        @keyframes spin {

            0% { transform: rotate(0deg); }

            100% { transform: rotate(360deg); }

        }

        .share-bar {

            background: #e0e0e0;

            height: 20px;

            border-radius: 10px;

            overflow: hidden;

            position: relative;

            margin: 5px 0;

        }

        .share-fill {

            background: linear-gradient(90deg, #4facfe 0%, #00f2fe 100%);

            height: 100%;

            transition: width 0.3s ease;

        }

        .concentration-info {

            background: #f0f7ff;

            padding: 20px;

            border-radius: 8px;

            margin: 20px 0;

            border-left: 4px solid #007bff;

        }

        #fileInput {

            display: none;

        }

        .category-badge {

            display: inline-block;

            padding: 4px 12px;

            border-radius: 20px;

            font-size: 12px;

            font-weight: 500;

            background: #e3f2fd;

            color: #1976d2;

        }

    </style>

</head>

<body>

    <div class="container">

        <h1>üîç An√°lisis de Comercios y MCC - Medios de Pago</h1>

        

        <div class="upload-area" id="uploadArea">

            <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="#666" stroke-width="2">

                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>

                <polyline points="7 10 12 15 17 10"></polyline>

                <line x1="12" y1="15" x2="12" y2="3"></line>

            </svg>

            <h3>Arrastra tu archivo CSV aqu√≠</h3>

            <p>o haz clic para seleccionar</p>

            <input type="file" id="fileInput" accept=".csv">

        </div>



        <div id="loadingSection" class="loading" style="display: none;">

            <div class="spinner"></div>

            <p>Procesando archivo...</p>

        </div>



        <div id="resultsSection" style="display: none;">

            <div class="metrics-grid">

                <div class="metric-card">

                    <h3>Total de Comercios</h3>

                    <div class="value" id="totalComercios">-</div>

                </div>

                <div class="metric-card orange">

                    <h3>Monto Total</h3>

                    <div class="value" id="montoTotal">-</div>

                </div>

                <div class="metric-card green">

                    <h3>Total Transacciones</h3>

                    <div class="value" id="totalTransacciones">-</div>

                </div>

                <div class="metric-card purple">

                    <h3>Categor√≠as MCC</h3>

                    <div class="value" id="totalCategorias">-</div>

                </div>

            </div>



            <div class="tabs">

                <button class="tab active" onclick="showTab('overview')">üìä Resumen General</button>

                <button class="tab" onclick="showTab('top50')">üèÜ Top 50 Comercios</button>

                <button class="tab" onclick="showTab('top50share')">üìà Top 50 con Share</button>

                <button class="tab" onclick="showTab('categories')">üìÅ Por Categor√≠a</button>

                <button class="tab" onclick="showTab('special')">üéØ Giros Especiales</button>

                <button class="tab" onclick="showTab('insights')">üí° Insights</button>

            </div>



            <div id="overview" class="tab-content active">

                <h2>Distribuci√≥n por Categor√≠as Principales</h2>

                <div class="chart-container">

                    <canvas id="categoryChart"></canvas>

                </div>

                

                <h2>Top 10 Categor√≠as por Monto</h2>

                <div class="chart-container">

                    <canvas id="topCategoriesChart"></canvas>

                </div>

            </div>



            <div id="top50" class="tab-content">

                <h2>Top 50 Comercios por Monto Total</h2>

                <div class="search-box">

                    <input type="text" id="searchTop50" placeholder="Buscar comercio..." onkeyup="filterTable('top50Table', this.value)">

                </div>

                <div style="overflow-x: auto;">

                    <table id="top50Table">

                        <thead>

                            <tr>

                                <th>Posici√≥n</th>

                                <th>Raz√≥n Social</th>

                                <th>Marca</th>

                                <th>RFC</th>

                                <th>MCC</th>

                                <th>Categor√≠a</th>

                                <th>Monto Total</th>

                                <th>Transacciones</th>

                                <th>Ticket Promedio</th>

                            </tr>

                        </thead>

                        <tbody id="top50Body"></tbody>

                    </table>

                </div>

            </div>



            <div id="top50share" class="tab-content">

                <h2 id="top50Title">Top 50 RFC - Consumo Total Acumulado</h2>

                

                <div style="background: #e3f2fd; padding: 20px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #1976d2;">

                    <h3 style="margin-top: 0; color: #1976d2;">üìä Modo de Visualizaci√≥n</h3>

                    <select id="groupModeSelect" onchange="displayTop50WithShare()" style="padding: 10px 20px; border: 2px solid #1976d2; border-radius: 5px; font-size: 16px; font-weight: bold;">

                        <option value="rfc">üè¢ Top 50 RFC - Consumo Total Acumulado</option>

                        <option value="razonSocial">üè™ Top 50 Comercios - Por Raz√≥n Social</option>

                    </select>

                    <p style="margin: 10px 0 0 0; color: #555;">

                        <strong>Modo RFC:</strong> Suma TODOS los consumos de cada contribuyente, sin importar cu√°ntas razones sociales o sucursales tenga.<br>

                        <strong>Ejemplo:</strong> Si OXXO (RFC: OXX930819GI8) tiene 100 sucursales, se suman todas en un solo registro.

                    </p>

                </div>

                

                <div class="metrics-grid" style="margin-bottom: 30px;">

                    <div class="metric-card">

                        <h3>Share Top 50</h3>

                        <div class="value" id="shareTop50">-</div>

                    </div>

                    <div class="metric-card orange">

                        <h3>Consumo Total Top 50</h3>

                        <div class="value" id="montoTop50">-</div>

                    </div>

                    <div class="metric-card green">

                        <h3>Transacciones Top 50</h3>

                        <div class="value" id="transaccionesTop50">-</div>

                    </div>

                </div>

                

                <div class="search-box">

                    <input type="text" id="searchTop50Share" placeholder="Buscar RFC o comercio..." onkeyup="filterTable('top50ShareTable', this.value)">

                </div>

                

                <div style="margin: 20px 0;">

                    <button onclick="exportTop50ToCSV()" style="padding: 10px 20px; background: #28a745; color: white; border: none; border-radius: 5px; cursor: pointer; font-weight: bold;">

                        üì• Exportar Top 50 a CSV

                    </button>

                    <button onclick="showRFCAnalysis()" style="padding: 10px 20px; background: #17a2b8; color: white; border: none; border-radius: 5px; cursor: pointer; margin-left: 10px; font-weight: bold;">

                        üìà Ver An√°lisis Detallado RFC

                    </button>

                </div>

                

                <div style="overflow-x: auto;">

                    <table id="top50ShareTable">

                        <thead>

                            <tr>

                                <th style="width: 50px;">Rank</th>

                                <th>RFC</th>

                                <th>Razones Sociales</th>

                                <th>Categor√≠as</th>

                                <th>MCCs</th>

                                <th>Registros</th>

                                <th>Consumo Total</th>

                                <th>Transacciones</th>

                                <th>Share (%)</th>

                                <th>Share Acum. (%)</th>

                                <th>Ticket Prom.</th>

                            </tr>

                        </thead>

                        <tbody id="top50ShareBody"></tbody>

                    </table>

                </div>

                

                <div class="concentration-info" id="concentrationInfo" style="margin-top: 30px;"></div>

                

                <div class="chart-container" style="margin-top: 40px;">

                    <h3>Curva de Concentraci√≥n - Top 50 RFC por Consumo Acumulado</h3>

                    <canvas id="concentrationChart"></canvas>

                </div>

                

                <div id="rfcAnalysisModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">

                    <div style="background: white; margin: 50px auto; padding: 30px; max-width: 90%; max-height: 80%; overflow-y: auto; border-radius: 10px;">

                        <h3>An√°lisis Detallado de RFC</h3>

                        <div id="rfcAnalysisContent"></div>

                        <button onclick="closeRFCAnalysis()" style="margin-top: 20px; padding: 10px 20px; background: #dc3545; color: white; border: none; border-radius: 5px; cursor: pointer;">

                            Cerrar

                        </button>

                    </div>

                </div>

            </div>



            <div id="categories" class="tab-content">

                <h2>An√°lisis por Categor√≠a MCC</h2>

                <div class="search-box">

                    <input type="text" id="searchCategories" placeholder="Buscar categor√≠a..." onkeyup="filterTable('categoriesTable', this.value)">

                </div>

                <table id="categoriesTable">

                    <thead>

                        <tr>

                            <th>Categor√≠a</th>

                            <th>Comercios</th>

                            <th>Monto Total</th>

                            <th>Transacciones</th>

                            <th>% del Total</th>

                            <th>Ticket Promedio</th>

                        </tr>

                    </thead>

                    <tbody id="categoriesBody"></tbody>

                </table>

            </div>



            <div id="special" class="tab-content">

                <h2>Giros Especiales Identificados</h2>

                <div id="specialBusinesses"></div>

            </div>



            <div id="insights" class="tab-content">

                <h2>Insights y An√°lisis Detallado</h2>

                <div class="insights-section" id="insightsContent"></div>

            </div>

        </div>

    </div>



    <script>

        // Mapeo completo de categor√≠as MCC para M√©xico

        const mccCategories = {

            // Transporte

            "4111": { category: "Transporte", description: "Transporte Local/Suburbano" },

            "4112": { category: "Transporte", description: "Ferrocarriles de Pasajeros" },

            "4121": { category: "Transporte", description: "Taxis y Limosinas" },

            "4131": { category: "Transporte", description: "L√≠neas de Autob√∫s" },

            "4214": { category: "Transporte", description: "Transportistas de Carga" },

            "4215": { category: "Transporte", description: "Servicios de Mensajer√≠a" },

            "4225": { category: "Transporte", description: "Almacenamiento" },

            "4411": { category: "Transporte", description: "L√≠neas de Cruceros" },

            "4457": { category: "Transporte", description: "Renta de Botes" },

            "4468": { category: "Transporte", description: "Puertos Deportivos" },

            "4511": { category: "Transporte", description: "Aerol√≠neas" },

            "4582": { category: "Transporte", description: "Aeropuertos" },

            "4722": { category: "Viajes", description: "Agencias de Viajes" },

            "4723": { category: "Viajes", description: "Paquetes Tur√≠sticos" },

            "4784": { category: "Transporte", description: "Casetas de Peaje" },

            "4789": { category: "Transporte", description: "Servicios de Transporte" },

            

            // Alojamiento - Hoteles espec√≠ficos (3501-3790)

            "3501": { category: "Alojamiento", description: "Holiday Inn" },

            "3502": { category: "Alojamiento", description: "Best Western" },

            "3503": { category: "Alojamiento", description: "Sheraton" },

            "3504": { category: "Alojamiento", description: "Hilton" },

            "3700": { category: "Alojamiento", description: "Hoteles (General)" },

            

            // Restaurantes y Comida

            "5411": { category: "Supermercados", description: "Supermercados" },

            "5412": { category: "Tiendas de Conveniencia", description: "Tiendas de Conveniencia" },

            "5422": { category: "Alimentos", description: "Carnicer√≠as" },

            "5441": { category: "Alimentos", description: "Dulcer√≠as" },

            "5451": { category: "Alimentos", description: "Lecher√≠as" },

            "5462": { category: "Alimentos", description: "Panader√≠as" },

            "5499": { category: "Alimentos", description: "Tiendas de Alimentos Especializados" },

            "5811": { category: "Restaurantes", description: "Catering" },

            "5812": { category: "Restaurantes", description: "Restaurantes" },

            "5813": { category: "Bares y Cantinas", description: "Bares y Cantinas" },

            "5814": { category: "Restaurantes", description: "Comida R√°pida" },

            "5815": { category: "Restaurantes", description: "Cafeter√≠as" },

            

            // Comercio al por menor

            "5200": { category: "Hogar", description: "Tiendas de Mejoras para el Hogar" },

            "5211": { category: "Construcci√≥n", description: "Maderer√≠as" },

            "5231": { category: "Construcci√≥n", description: "Tiendas de Pintura y Vidrio" },

            "5251": { category: "Ferreter√≠as", description: "Ferreter√≠as" },

            "5261": { category: "Hogar", description: "Viveros" },

            "5300": { category: "Tiendas de Membres√≠a", description: "Tiendas de Membres√≠a" },

            "5309": { category: "Comercio", description: "Tiendas Duty Free" },

            "5310": { category: "Tiendas de Descuento", description: "Tiendas de Descuento" },

            "5311": { category: "Tiendas Departamentales", description: "Tiendas Departamentales" },

            "5331": { category: "Comercio", description: "Tiendas de Variedad" },

            

            // Ropa y Accesorios

            "5611": { category: "Ropa", description: "Ropa para Hombres" },

            "5621": { category: "Ropa", description: "Ropa para Mujeres" },

            "5631": { category: "Ropa", description: "Accesorios para Mujeres" },

            "5641": { category: "Ropa", description: "Ropa para Ni√±os" },

            "5651": { category: "Ropa", description: "Ropa Familiar" },

            "5655": { category: "Ropa", description: "Ropa Deportiva" },

            "5661": { category: "Calzado", description: "Zapater√≠as" },

            "5691": { category: "Ropa", description: "Ropa para Hombres y Mujeres" },

            

            // Entretenimiento y Servicios

            "7032": { category: "Deportes", description: "Campos y Clubes Deportivos" },

            "7033": { category: "Recreaci√≥n", description: "Campamentos y Trailers" },

            "7210": { category: "Servicios", description: "Servicios de Lavander√≠a" },

            "7211": { category: "Servicios", description: "Lavander√≠as" },

            "7216": { category: "Servicios", description: "Tintorer√≠as" },

            "7230": { category: "Belleza", description: "Salones de Belleza" },

            "7261": { category: "Servicios", description: "Servicios Funerarios" },

            "7297": { category: "Belleza", description: "Masajes" },

            "7298": { category: "Belleza", description: "Spas" },

            "7311": { category: "Servicios Profesionales", description: "Servicios de Publicidad" },

            "7372": { category: "Tecnolog√≠a", description: "Servicios de Programaci√≥n" },

            "7392": { category: "Servicios Profesionales", description: "Servicios de Consultor√≠a" },

            "7511": { category: "Renta de Veh√≠culos", description: "Renta de Camiones" },

            "7512": { category: "Renta de Veh√≠culos", description: "Renta de Autos" },

            "7523": { category: "Estacionamientos", description: "Estacionamientos" },

            "7531": { category: "Automotriz", description: "Talleres de Carrocer√≠a" },

            "7534": { category: "Automotriz", description: "Servicios de Llantas" },

            "7538": { category: "Automotriz", description: "Talleres Automotrices" },

            "7542": { category: "Automotriz", description: "Lavados de Autos" },

            "7832": { category: "Entretenimiento", description: "Cines" },

            "7841": { category: "Entretenimiento", description: "Renta de Videos" },

            "7911": { category: "Entretenimiento", description: "Salones de Baile" },

            "7932": { category: "Entretenimiento", description: "Billares" },

            "7933": { category: "Entretenimiento", description: "Boliches" },

            "7941": { category: "Deportes", description: "Clubes Deportivos" },

            "7991": { category: "Entretenimiento", description: "Atracciones Tur√≠sticas" },

            "7992": { category: "Deportes", description: "Campos de Golf" },

            "7993": { category: "Entretenimiento", description: "Parques de Diversiones" },

            "7994": { category: "Entretenimiento", description: "Videojuegos" },

            "7995": { category: "Casinos y Apuestas", description: "Apuestas/Casinos" },

            "7996": { category: "Entretenimiento", description: "Circos y Carnavales" },

            "7997": { category: "Entretenimiento", description: "Clubes" },

            "7998": { category: "Entretenimiento", description: "Acuarios" },

            "7999": { category: "Entretenimiento", description: "Servicios de Recreaci√≥n" },

            

            // Servicios Profesionales y Salud

            "8011": { category: "Salud", description: "Doctores" },

            "8021": { category: "Salud", description: "Dentistas" },

            "8031": { category: "Salud", description: "Oste√≥patas" },

            "8041": { category: "Salud", description: "Quiropr√°cticos" },

            "8042": { category: "Salud", description: "Optometristas" },

            "8043": { category: "Salud", description: "√ìpticas" },

            "8049": { category: "Salud", description: "Podiatras" },

            "8050": { category: "Salud", description: "Enfermer√≠a" },

            "8062": { category: "Salud", description: "Hospitales" },

            "8071": { category: "Salud", description: "Laboratorios M√©dicos" },

            "8099": { category: "Salud", description: "Servicios M√©dicos" },

            "8111": { category: "Servicios Legales", description: "Servicios Legales" },

            "8211": { category: "Educaci√≥n", description: "Escuelas Primarias y Secundarias" },

            "8220": { category: "Educaci√≥n", description: "Universidades" },

            "8241": { category: "Educaci√≥n", description: "Escuelas por Correspondencia" },

            "8244": { category: "Educaci√≥n", description: "Escuelas de Negocios" },

            "8249": { category: "Educaci√≥n", description: "Escuelas Vocacionales" },

            "8299": { category: "Educaci√≥n", description: "Servicios Educativos" },

            "8351": { category: "Servicios", description: "Guarder√≠as" },

            "8398": { category: "Organizaciones", description: "Organizaciones de Caridad" },

            "8641": { category: "Organizaciones", description: "Asociaciones C√≠vicas" },

            "8651": { category: "Organizaciones", description: "Organizaciones Pol√≠ticas" },

            "8661": { category: "Organizaciones", description: "Organizaciones Religiosas" },

            "8675": { category: "Organizaciones", description: "Asociaciones de Autom√≥viles" },

            "8699": { category: "Organizaciones", description: "Organizaciones de Membres√≠a" },

            

            // Gobierno

            "9211": { category: "Gobierno", description: "Servicios de Corte" },

            "9222": { category: "Gobierno", description: "Multas" },

            "9223": { category: "Gobierno", description: "Fianzas" },

            "9311": { category: "Gobierno", description: "Pagos de Impuestos" },

            "9399": { category: "Gobierno", description: "Servicios de Gobierno" },

            "9402": { category: "Gobierno", description: "Servicios Postales" },

            

            // Comercios especiales

            "5912": { category: "Farmacias", description: "Farmacias" },

            "5921": { category: "Vinater√≠as y Licores", description: "Licorer√≠as/Vinater√≠as" },

            "5122": { category: "Farmacias", description: "Medicamentos" },

            "5993": { category: "Tabaquer√≠as", description: "Tabaquer√≠as" },

            

            // Telecomunicaciones

            "4812": { category: "Telecomunicaciones", description: "Servicios de Telecomunicaciones" },

            "4813": { category: "Telecomunicaciones", description: "Larga Distancia" },

            "4814": { category: "Telecomunicaciones", description: "Llamadas Telef√≥nicas" },

            "4899": { category: "Telecomunicaciones", description: "Servicios de Cable" },

            "4900": { category: "Servicios P√∫blicos", description: "Servicios P√∫blicos" },

            

            // Gasoliner√≠as

            "5541": { category: "Gasolineras", description: "Gasolineras con Servicio" },

            "5542": { category: "Gasolineras", description: "Gasolineras de Autoservicio" },

            "5983": { category: "Combustibles", description: "Combust√≥leo" },

            

            // Servicios Financieros

            "6010": { category: "Servicios Financieros", description: "Retiros de Efectivo Manual" },

            "6011": { category: "Servicios Financieros", description: "Retiros de Efectivo ATM" },

            "6012": { category: "Servicios Financieros", description: "Instituciones Financieras" },

            "6051": { category: "Servicios Financieros", description: "Cuasi Efectivo" },

            "6211": { category: "Servicios Financieros", description: "Corredur√≠as de Valores" },

            "6300": { category: "Seguros", description: "Seguros" },

            "6513": { category: "Bienes Ra√≠ces", description: "Agentes de Bienes Ra√≠ces" },

            

            // E-commerce y tecnolog√≠a

            "5045": { category: "Tecnolog√≠a", description: "Computadoras y Software" },

            "5732": { category: "Electr√≥nicos", description: "Tiendas de Electr√≥nicos" },

            "5734": { category: "Tecnolog√≠a", description: "Software de Computadoras" },

            "5735": { category: "Electr√≥nicos", description: "Tiendas de Discos" },

            "5815": { category: "Digital", description: "Audio/Video Digital" },

            "5816": { category: "Digital", description: "Videojuegos Digitales" },

            "5817": { category: "Digital", description: "Aplicaciones Digitales" },

            "5818": { category: "Digital", description: "Suscripciones Digitales" },

            

            // Otros

            "5111": { category: "Papeler√≠as", description: "Papeler√≠as" },

            "5137": { category: "Ropa", description: "Uniformes" },

            "5192": { category: "Librer√≠as", description: "Librer√≠as" },

            "5193": { category: "Florister√≠as", description: "Florister√≠as" },

            "5712": { category: "Hogar", description: "Muebles" },

            "5722": { category: "Hogar", description: "Aparatos del Hogar" },

            "5733": { category: "M√∫sica", description: "Instrumentos Musicales" },

            "5940": { category: "Deportes", description: "Bicicletas" },

            "5941": { category: "Deportes", description: "Art√≠culos Deportivos" },

            "5942": { category: "Librer√≠as", description: "Librer√≠as" },

            "5943": { category: "Papeler√≠as", description: "Papeler√≠as y Art√≠culos de Oficina" },

            "5944": { category: "Joyer√≠as", description: "Relojer√≠as y Joyer√≠as" },

            "5945": { category: "Jugueter√≠as", description: "Jugueter√≠as" },

            "5946": { category: "Fotograf√≠a", description: "Tiendas de C√°maras" },

            "5947": { category: "Regalos", description: "Tiendas de Regalos" },

            "5970": { category: "Arte", description: "Tiendas de Arte" },

            "5971": { category: "Arte", description: "Galer√≠as de Arte" },

            "5977": { category: "Belleza", description: "Cosm√©ticos" },

            "5992": { category: "Florister√≠as", description: "Florer√≠as" },

            "5995": { category: "Mascotas", description: "Tiendas de Mascotas" },

            "5999": { category: "Comercio General", description: "Tiendas Miscel√°neas" }

        };



        // Variables globales

        let processedData = [];

        let categoryTotals = {};

        let specialBusinesses = {

            vinaterias: [],

            casinos: [],

            bares: [],

            tabacos: [],

            apuestas: []

        };



        // Configuraci√≥n de eventos

        const uploadArea = document.getElementById('uploadArea');

        const fileInput = document.getElementById('fileInput');



        uploadArea.addEventListener('click', () => fileInput.click());

        uploadArea.addEventListener('dragover', (e) => {

            e.preventDefault();

            uploadArea.classList.add('dragging');

        });

        uploadArea.addEventListener('dragleave', () => {

            uploadArea.classList.remove('dragging');

        });

        uploadArea.addEventListener('drop', (e) => {

            e.preventDefault();

            uploadArea.classList.remove('dragging');

            const files = e.dataTransfer.files;

            if (files.length > 0) {

                handleFile(files[0]);

            }

        });

        fileInput.addEventListener('change', (e) => {

            if (e.target.files.length > 0) {

                handleFile(e.target.files[0]);

            }

        });



        function handleFile(file) {

            if (!file.name.endsWith('.csv')) {

                alert('Por favor selecciona un archivo CSV');

                return;

            }



            document.getElementById('loadingSection').style.display = 'block';

            document.getElementById('uploadArea').style.display = 'none';



            Papa.parse(file, {

                header: true,

                dynamicTyping: false,

                skipEmptyLines: true,

                complete: function(results) {

                    processData(results.data);

                },

                error: function(error) {

                    alert('Error al leer el archivo: ' + error.message);

                    document.getElementById('loadingSection').style.display = 'none';

                    document.getElementById('uploadArea').style.display = 'block';

                }

            });

        }



        function cleanMonto(montoStr) {

            if (!montoStr) return 0;

            const cleaned = String(montoStr).replace(/[$,\s]/g, '');

            return parseFloat(cleaned) || 0;

        }



        function formatMoney(amount) {

            return new Intl.NumberFormat('es-MX', {

                style: 'currency',

                currency: 'MXN',

                minimumFractionDigits: 0,

                maximumFractionDigits: 0

            }).format(amount);

        }



        function formatNumber(num) {

            return new Intl.NumberFormat('es-MX').format(num);

        }



        function processData(data) {

            // Procesar cada registro

            processedData = data.map(row => {

                const mcc = String(row.mcc || '').padStart(4, '0');

                const monto = cleanMonto(row[' monto '] || row.monto);

                const transacciones = parseInt(row.transacciones) || 0;

                const mccInfo = mccCategories[mcc] || { category: "No Categorizado", description: "MCC no identificado" };

                

                // Identificar giros especiales por MCC o nombre

                const razonSocial = (row['Razon _Social'] || row.razon_social || '').toUpperCase();

                const marca = (row.MARCA || '').toUpperCase();

                const rfc = (row.RFC || '').toUpperCase();

                

                return {

                    ...row,

                    mcc: mcc,

                    monto: monto,

                    transacciones: transacciones,

                    ticketPromedio: transacciones > 0 ? monto / transacciones : 0,

                    category: mccInfo.category,

                    description: mccInfo.description,

                    razonSocialClean: razonSocial,

                    marcaClean: marca

                };

            });



            // Identificar giros especiales

            processedData.forEach(row => {

                // Vinater√≠as y licores

                if (row.mcc === '5921' || 

                    row.razonSocialClean.includes('VINATERIA') || 

                    row.razonSocialClean.includes('LICORES') ||

                    row.razonSocialClean.includes('VINOS') ||

                    row.marcaClean.includes('MODELORAMA') ||

                    row.marcaClean.includes('OXXO BEER')) {

                    specialBusinesses.vinaterias.push(row);

                }

                

                // Casinos

                if (row.mcc === '7995' || 

                    row.razonSocialClean.includes('CASINO') ||

                    row.razonSocialClean.includes('CALIENTE') ||

                    row.razonSocialClean.includes('PLAY CITY')) {

                    specialBusinesses.casinos.push(row);

                }

                

                // Bares y cantinas

                if (row.mcc === '5813' || 

                    row.razonSocialClean.includes('BAR') ||

                    row.razonSocialClean.includes('CANTINA') ||

                    row.razonSocialClean.includes('CERVECERIA')) {

                    specialBusinesses.bares.push(row);

                }

                

                // Tabaquer√≠as

                if (row.mcc === '5993' || 

                    row.razonSocialClean.includes('TABACO') ||

                    row.razonSocialClean.includes('CIGARR')) {

                    specialBusinesses.tabacos.push(row);

                }

                

                // Apuestas

                if (row.razonSocialClean.includes('APUESTA') ||

                    row.razonSocialClean.includes('SORTEO') ||

                    row.razonSocialClean.includes('PRONOSTIC')) {

                    specialBusinesses.apuestas.push(row);

                }

            });



            // Calcular totales por categor√≠a

            categoryTotals = processedData.reduce((acc, row) => {

                if (!acc[row.category]) {

                    acc[row.category] = {

                        count: 0,

                        monto: 0,

                        transacciones: 0,

                        comercios: new Set()

                    };

                }

                acc[row.category].count++;

                acc[row.category].monto += row.monto;

                acc[row.category].transacciones += row.transacciones;

                acc[row.category].comercios.add(row['Razon _Social'] || row.razon_social);

                return acc;

            }, {});



            displayResults();

        }



        function displayResults() {

            document.getElementById('loadingSection').style.display = 'none';

            document.getElementById('resultsSection').style.display = 'block';



            // M√©tricas generales

            const totalMonto = processedData.reduce((sum, row) => sum + row.monto, 0);

            const totalTransacciones = processedData.reduce((sum, row) => sum + row.transacciones, 0);

            const uniqueBusinesses = new Set(processedData.map(row => row['Razon _Social'] || row.razon_social)).size;



            document.getElementById('totalComercios').textContent = formatNumber(uniqueBusinesses);

            document.getElementById('montoTotal').textContent = formatMoney(totalMonto);

            document.getElementById('totalTransacciones').textContent = formatNumber(totalTransacciones);

            document.getElementById('totalCategorias').textContent = Object.keys(categoryTotals).length;



            // Gr√°ficas

            createCategoryChart();

            createTopCategoriesChart();



            // Top 50 comercios

            displayTop50();

            

            // Establecer modo por defecto como RFC

            if (document.getElementById('groupModeSelect')) {

                document.getElementById('groupModeSelect').value = 'rfc';

            }

            

            // Top 50 con Share

            displayTop50WithShare();



            // Categor√≠as

            displayCategories();



            // Giros especiales

            displaySpecialBusinesses();



            // Insights

            generateInsights();

        }



        function createCategoryChart() {

            const ctx = document.getElementById('categoryChart').getContext('2d');

            const sortedCategories = Object.entries(categoryTotals)

                .sort((a, b) => b[1].monto - a[1].monto)

                .slice(0, 10);



            new Chart(ctx, {

                type: 'pie',

                data: {

                    labels: sortedCategories.map(([cat, _]) => cat),

                    datasets: [{

                        data: sortedCategories.map(([_, data]) => data.monto),

                        backgroundColor: [

                            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',

                            '#FF9F40', '#FF6384', '#C9CBCF', '#4BC0C0', '#36A2EB'

                        ]

                    }]

                },

                options: {

                    responsive: true,

                    maintainAspectRatio: false,

                    plugins: {

                        legend: {

                            position: 'right'

                        },

                        tooltip: {

                            callbacks: {

                                label: function(context) {

                                    const label = context.label || '';

                                    const value = formatMoney(context.parsed);

                                    const percentage = ((context.parsed / context.dataset.data.reduce((a, b) => a + b)) * 100).toFixed(1);

                                    return `${label}: ${value} (${percentage}%)`;

                                }

                            }

                        }

                    }

                }

            });

        }



        function createTopCategoriesChart() {

            const ctx = document.getElementById('topCategoriesChart').getContext('2d');

            const sortedCategories = Object.entries(categoryTotals)

                .sort((a, b) => b[1].monto - a[1].monto)

                .slice(0, 10);



            new Chart(ctx, {

                type: 'bar',

                data: {

                    labels: sortedCategories.map(([cat, _]) => cat),

                    datasets: [{

                        label: 'Monto Total',

                        data: sortedCategories.map(([_, data]) => data.monto),

                        backgroundColor: '#36A2EB'

                    }]

                },

                options: {

                    responsive: true,

                    maintainAspectRatio: false,

                    scales: {

                        y: {

                            beginAtZero: true,

                            ticks: {

                                callback: function(value) {

                                    return formatMoney(value);

                                }

                            }

                        }

                    },

                    plugins: {

                        tooltip: {

                            callbacks: {

                                label: function(context) {

                                    return formatMoney(context.parsed.y);

                                }

                            }

                        }

                    }

                }

            });

        }



        function displayTop50() {

            const sortedByAmount = [...processedData].sort((a, b) => b.monto - a.monto).slice(0, 50);

            const tbody = document.getElementById('top50Body');

            tbody.innerHTML = '';



            sortedByAmount.forEach((row, index) => {

                const tr = document.createElement('tr');

                tr.innerHTML = `

                    <td>${index + 1}</td>

                    <td>${row['Razon _Social'] || row.razon_social || 'N/A'}</td>

                    <td>${row.MARCA || 'N/A'}</td>

                    <td>${row.RFC || 'N/A'}</td>

                    <td>${row.mcc}</td>

                    <td><span class="category-badge">${row.category}</span></td>

                    <td>${formatMoney(row.monto)}</td>

                    <td>${formatNumber(row.transacciones)}</td>

                    <td>${formatMoney(row.ticketPromedio)}</td>

                `;

                tbody.appendChild(tr);

            });

        }



        function displayCategories() {

            const tbody = document.getElementById('categoriesBody');

            tbody.innerHTML = '';

            const totalMonto = processedData.reduce((sum, row) => sum + row.monto, 0);



            Object.entries(categoryTotals)

                .sort((a, b) => b[1].monto - a[1].monto)

                .forEach(([category, data]) => {

                    const tr = document.createElement('tr');

                    tr.innerHTML = `

                        <td>${category}</td>

                        <td>${data.comercios.size}</td>

                        <td>${formatMoney(data.monto)}</td>

                        <td>${formatNumber(data.transacciones)}</td>

                        <td>${((data.monto / totalMonto) * 100).toFixed(2)}%</td>

                        <td>${formatMoney(data.monto / data.transacciones)}</td>

                    `;

                    tbody.appendChild(tr);

                });

        }



        function displaySpecialBusinesses() {

            const container = document.getElementById('specialBusinesses');

            let html = '';



            // Vinater√≠as

            html += `<div class="insight-item">

                <h3>üç∑ Vinater√≠as y Licores (${specialBusinesses.vinaterias.length} comercios)</h3>

                <p>Monto total: ${formatMoney(specialBusinesses.vinaterias.reduce((sum, r) => sum + r.monto, 0))}</p>

                <p>Transacciones: ${formatNumber(specialBusinesses.vinaterias.reduce((sum, r) => sum + r.transacciones, 0))}</p>

                <details>

                    <summary>Ver detalles</summary>

                    <ul>

                        ${specialBusinesses.vinaterias.slice(0, 10).map(r => 

                            `<li>${r['Razon _Social'] || r.razon_social} - ${formatMoney(r.monto)}</li>`

                        ).join('')}

                    </ul>

                </details>

            </div>`;



            // Casinos

            html += `<div class="insight-item">

                <h3>üé∞ Casinos y Apuestas (${specialBusinesses.casinos.length} comercios)</h3>

                <p>Monto total: ${formatMoney(specialBusinesses.casinos.reduce((sum, r) => sum + r.monto, 0))}</p>

                <p>Transacciones: ${formatNumber(specialBusinesses.casinos.reduce((sum, r) => sum + r.transacciones, 0))}</p>

                <details>

                    <summary>Ver detalles</summary>

                    <ul>

                        ${specialBusinesses.casinos.slice(0, 10).map(r => 

                            `<li>${r['Razon _Social'] || r.razon_social} - ${formatMoney(r.monto)}</li>`

                        ).join('')}

                    </ul>

                </details>

            </div>`;



            // Bares

            html += `<div class="insight-item">

                <h3>üç∫ Bares y Cantinas (${specialBusinesses.bares.length} comercios)</h3>

                <p>Monto total: ${formatMoney(specialBusinesses.bares.reduce((sum, r) => sum + r.monto, 0))}</p>

                <p>Transacciones: ${formatNumber(specialBusinesses.bares.reduce((sum, r) => sum + r.transacciones, 0))}</p>

                <details>

                    <summary>Ver detalles</summary>

                    <ul>

                        ${specialBusinesses.bares.slice(0, 10).map(r => 

                            `<li>${r['Razon _Social'] || r.razon_social} - ${formatMoney(r.monto)}</li>`

                        ).join('')}

                    </ul>

                </details>

            </div>`;



            // Tabaquer√≠as

            html += `<div class="insight-item">

                <h3>üö¨ Tabaquer√≠as (${specialBusinesses.tabacos.length} comercios)</h3>

                <p>Monto total: ${formatMoney(specialBusinesses.tabacos.reduce((sum, r) => sum + r.monto, 0))}</p>

                <p>Transacciones: ${formatNumber(specialBusinesses.tabacos.reduce((sum, r) => sum + r.transacciones, 0))}</p>

            </div>`;



            container.innerHTML = html;

        }



        function generateInsights() {

            const container = document.getElementById('insightsContent');

            const totalMonto = processedData.reduce((sum, row) => sum + row.monto, 0);

            const totalTransacciones = processedData.reduce((sum, row) => sum + row.transacciones, 0);

            

            // An√°lisis de ticket promedio

            const ticketPromedio = totalMonto / totalTransacciones;

            const ticketsAltos = processedData.filter(r => r.ticketPromedio > ticketPromedio * 3);

            const ticketsBajos = processedData.filter(r => r.ticketPromedio < ticketPromedio / 3);



            // Comercios con m√°s transacciones

            const topPorTransacciones = [...processedData].sort((a, b) => b.transacciones - a.transacciones).slice(0, 10);



            // MCCs no categorizados

            const noCategorizados = processedData.filter(r => r.category === "No Categorizado");



            let html = `

                <div class="insight-item">

                    <h3>üìä Resumen Ejecutivo</h3>

                    <p>Se analizaron <strong>${formatNumber(processedData.length)}</strong> registros de comercios no afiliados.</p>

                    <p>El ticket promedio general es de <strong>${formatMoney(ticketPromedio)}</strong>.</p>

                    <p>Las categor√≠as con mayor volumen son: ${Object.entries(categoryTotals)

                        .sort((a, b) => b[1].monto - a[1].monto)

                        .slice(0, 3)

                        .map(([cat, data]) => `<strong>${cat}</strong> (${((data.monto/totalMonto)*100).toFixed(1)}%)`)

                        .join(', ')}.

                    </p>

                </div>



                <div class="insight-item">

                    <h3>üí≥ Comportamiento de Consumo</h3>

                    <p><strong>Tickets altos:</strong> ${ticketsAltos.length} comercios tienen tickets promedio superiores a ${formatMoney(ticketPromedio * 3)}</p>

                    <p><strong>Tickets bajos:</strong> ${ticketsBajos.length} comercios tienen tickets promedio menores a ${formatMoney(ticketPromedio / 3)}</p>

                    <p>Los comercios con m√°s transacciones son principalmente de las categor√≠as: ${

                        [...new Set(topPorTransacciones.slice(0, 5).map(r => r.category))].join(', ')

                    }</p>

                </div>



                <div class="insight-item">

                    <h3>üéØ Giros Especiales Detectados</h3>

                    <p><strong>Entretenimiento adulto:</strong> ${formatMoney(

                        (specialBusinesses.casinos.reduce((s, r) => s + r.monto, 0) +

                         specialBusinesses.bares.reduce((s, r) => s + r.monto, 0))

                    )} en casinos, bares y cantinas</p>

                    <p><strong>Bebidas alcoh√≥licas:</strong> ${formatMoney(

                        specialBusinesses.vinaterias.reduce((s, r) => s + r.monto, 0)

                    )} en vinater√≠as y licores</p>

                    <p><strong>Tabaco:</strong> ${formatMoney(

                        specialBusinesses.tabacos.reduce((s, r) => s + r.monto, 0)

                    )} en tabaquer√≠as</p>

                </div>



                <div class="insight-item">

                    <h3>‚ö†Ô∏è Comercios No Categorizados</h3>

                    <p>Se encontraron <strong>${noCategorizados.length}</strong> registros sin categor√≠a MCC identificada.</p>

                    <p>Estos representan <strong>${formatMoney(noCategorizados.reduce((s, r) => s + r.monto, 0))}</strong> en volumen.</p>

                    <p>Se recomienda revisar manualmente estos comercios para mejorar la categorizaci√≥n.</p>

                </div>



                <div class="insight-item">

                    <h3>üîç Recomendaciones</h3>

                    <ul>

                        <li>Revisar los comercios con MCCs no categorizados para completar el mapeo</li>

                        <li>Analizar los comercios con tickets muy altos para identificar posibles fraudes</li>

                        <li>Considerar estrategias espec√≠ficas para los giros de mayor volumen</li>

                        <li>Implementar alertas para transacciones en giros sensibles (casinos, apuestas)</li>

                        <li>Desarrollar campa√±as dirigidas a las categor√≠as con mayor potencial de crecimiento</li>

                    </ul>

                </div>

            `;



            container.innerHTML = html;

        }



        function displayTop50WithShare() {

            const totalMonto = processedData.reduce((sum, row) => sum + row.monto, 0);

            const totalTransacciones = processedData.reduce((sum, row) => sum + row.transacciones, 0);

            

            // Obtener el modo de agrupaci√≥n seleccionado

            const groupMode = document.getElementById('groupModeSelect') ? 

                document.getElementById('groupModeSelect').value : 'rfc';

            

            // Actualizar t√≠tulo seg√∫n el modo

            const titleElement = document.getElementById('top50Title');

            if (titleElement) {

                titleElement.textContent = groupMode === 'rfc' ? 

                    'Top 50 RFC - Consumo Total Acumulado' : 

                    'Top 50 Comercios - Por Raz√≥n Social';

            }

            

            // Agrupar seg√∫n el modo seleccionado

            const comerciosAgrupados = {};

            processedData.forEach(row => {

                let key;

                if (groupMode === 'rfc') {

                    // Normalizar RFC: quitar espacios, convertir a may√∫sculas

                    const rfcNormalizado = (row.RFC || '').toString().trim().toUpperCase();

                    // Si no hay RFC o est√° vac√≠o, usar "SIN_RFC" + un identificador √∫nico

                    key = rfcNormalizado && rfcNormalizado !== 'N/A' && rfcNormalizado !== '' ? 

                        rfcNormalizado : `SIN_RFC_${row['Razon _Social'] || row.razon_social || 'DESCONOCIDO'}`;

                } else {

                    key = row['Razon _Social'] || row.razon_social || 'SIN_NOMBRE';

                }

                

                if (!comerciosAgrupados[key]) {

                    comerciosAgrupados[key] = {

                        key: key,

                        razonSocial: new Set(),

                        marca: new Set(),

                        rfc: groupMode === 'rfc' ? key : row.RFC || 'N/A',

                        categories: new Set(),

                        monto: 0,

                        transacciones: 0,

                        registros: 0,

                        mccs: new Set(),

                        detalleRegistros: []

                    };

                }

                

                // Agregar datos √∫nicos

                const razonSocial = row['Razon _Social'] || row.razon_social;

                if (razonSocial) {

                    comerciosAgrupados[key].razonSocial.add(razonSocial);

                }

                

                const marca = row.MARCA;

                if (marca && marca !== 'N/A') {

                    comerciosAgrupados[key].marca.add(marca);

                }

                

                comerciosAgrupados[key].categories.add(row.category);

                comerciosAgrupados[key].mccs.add(row.mcc);

                comerciosAgrupados[key].monto += row.monto;

                comerciosAgrupados[key].transacciones += row.transacciones;

                comerciosAgrupados[key].registros++;

                comerciosAgrupados[key].detalleRegistros.push({

                    razonSocial: razonSocial,

                    marca: marca,

                    monto: row.monto,

                    transacciones: row.transacciones,

                    mcc: row.mcc,

                    category: row.category

                });

            });



            // Mensaje de depuraci√≥n para verificar agrupaci√≥n

            if (groupMode === 'rfc') {

                console.log('=== AGRUPACI√ìN POR RFC COMPLETADA ===');

                console.log(`Total de RFCs √∫nicos: ${Object.keys(comerciosAgrupados).length}`);

                console.log('\nEjemplo de RFC agrupado (el de mayor monto):');

                const topRFC = Object.values(comerciosAgrupados)

                    .sort((a, b) => b.monto - a.monto)[0];

                if (topRFC) {

                    console.log(`RFC: ${topRFC.rfc}`);

                    console.log(`Registros agrupados: ${topRFC.registros}`);

                    console.log(`Monto total acumulado: ${topRFC.monto.toLocaleString('es-MX')}`);

                    console.log(`Transacciones totales: ${topRFC.transacciones}`);

                    console.log(`Razones sociales incluidas: ${Array.from(topRFC.razonSocial).join(', ')}`);

                    console.log(`Categor√≠as: ${Array.from(topRFC.categories).join(', ')}`);

                    console.log(`MCCs: ${Array.from(topRFC.mccs).join(', ')}`);

                    console.log('\nDetalle de registros agrupados:');

                    topRFC.detalleRegistros.slice(0, 5).forEach((detalle, i) => {

                        console.log(`  ${i + 1}. ${detalle.razonSocial} - ${detalle.monto.toLocaleString('es-MX')} - ${detalle.transacciones} trans.`);

                    });

                    if (topRFC.detalleRegistros.length > 5) {

                        console.log(`  ... y ${topRFC.detalleRegistros.length - 5} registros m√°s`);

                    }

                }

                console.log('=====================================\n');

            }

            

            // Convertir a array y ordenar por monto

            const comerciosArray = Object.values(comerciosAgrupados)

                .filter(c => !c.key.startsWith('SIN_RFC_') || groupMode !== 'rfc') // Filtrar sin RFC solo en modo RFC

                .map(c => ({

                    ...c,

                    razonSocialStr: Array.from(c.razonSocial).sort().join(', ') || 'N/A',

                    marcaStr: Array.from(c.marca).sort().join(', ') || 'N/A',

                    categoriesStr: Array.from(c.categories).sort().join(', '),

                    mccsStr: Array.from(c.mccs).sort().join(', ')

                }))

                .sort((a, b) => b.monto - a.monto)

                .slice(0, 50);



            // Calcular m√©tricas del top 50

            const montoTop50 = comerciosArray.reduce((sum, c) => sum + c.monto, 0);

            const transaccionesTop50 = comerciosArray.reduce((sum, c) => sum + c.transacciones, 0);

            const shareTop50 = (montoTop50 / totalMonto) * 100;



            // Actualizar m√©tricas en la UI

            document.getElementById('shareTop50').textContent = shareTop50.toFixed(2) + '%';

            document.getElementById('montoTop50').textContent = formatMoney(montoTop50);

            document.getElementById('transaccionesTop50').textContent = formatNumber(transaccionesTop50);



            // Actualizar encabezados de la tabla seg√∫n el modo

            const tableHeaders = document.querySelector('#top50ShareTable thead tr');

            tableHeaders.innerHTML = `

                <th style="width: 50px;">Rank</th>

                <th>${groupMode === 'rfc' ? 'RFC' : 'Raz√≥n Social'}</th>

                <th>${groupMode === 'rfc' ? 'Razones Sociales' : 'Marcas'}</th>

                <th>Categor√≠as</th>

                <th>MCCs</th>

                <th>Registros</th>

                <th>${groupMode === 'rfc' ? 'Consumo Total Acumulado' : 'Volumen Venta'}</th>

                <th>Transacciones</th>

                <th>Share (%)</th>

                <th>Share Acum. (%)</th>

                <th>Ticket Prom.</th>

            `;



            // Llenar la tabla

            const tbody = document.getElementById('top50ShareBody');

            tbody.innerHTML = '';

            let shareAcumulado = 0;



            comerciosArray.forEach((comercio, index) => {

                const share = (comercio.monto / totalMonto) * 100;

                shareAcumulado += share;

                const ticketPromedio = comercio.transacciones > 0 ? comercio.monto / comercio.transacciones : 0;



                const tr = document.createElement('tr');

                

                if (groupMode === 'rfc') {

                    const esRFCValido = !comercio.rfc.startsWith('SIN_RFC_');

                    tr.innerHTML = `

                        <td style="text-align: center; font-weight: bold;">${index + 1}</td>

                        <td style="font-weight: bold; ${!esRFCValido ? 'color: #dc3545;' : ''}">${comercio.rfc}</td>

                        <td>

                            <div style="max-height: 60px; overflow-y: auto; font-size: 12px;">

                                ${comercio.razonSocialStr}

                            </div>

                        </td>

                        <td>

                            <div style="max-height: 60px; overflow-y: auto;">

                                ${comercio.categoriesStr.split(', ').map(cat => 

                                    `<span class="category-badge" style="margin: 2px; font-size: 11px;">${cat}</span>`

                                ).join('')}

                            </div>

                        </td>

                        <td style="font-size: 12px;">${comercio.mccsStr}</td>

                        <td style="text-align: center;">

                            <span style="font-weight: bold; color: ${comercio.registros > 1 ? '#28a745' : '#666'};">

                                ${comercio.registros}

                            </span>

                            ${comercio.registros > 1 ? '<br><small style="color: #28a745;">‚úì Acumulado</small>' : ''}

                        </td>

                        <td style="text-align: right; font-weight: bold; color: #28a745;">${formatMoney(comercio.monto)}</td>

                        <td style="text-align: right;">${formatNumber(comercio.transacciones)}</td>

                        <td style="text-align: right;">

                            <div style="display: flex; align-items: center; gap: 10px;">

                                <span>${share.toFixed(3)}%</span>

                                <div class="share-bar" style="width: 60px;">

                                    <div class="share-fill" style="width: ${Math.min(share * 10, 100)}%"></div>

                                </div>

                            </div>

                        </td>

                        <td style="text-align: right; font-weight: bold;">${shareAcumulado.toFixed(2)}%</td>

                        <td style="text-align: right;">${formatMoney(ticketPromedio)}</td>

                    `;

                } else {

                    tr.innerHTML = `

                        <td style="text-align: center; font-weight: bold;">${index + 1}</td>

                        <td>${comercio.razonSocialStr}</td>

                        <td>${comercio.marcaStr}</td>

                        <td>

                            <div style="max-height: 60px; overflow-y: auto;">

                                ${comercio.categoriesStr.split(', ').map(cat => 

                                    `<span class="category-badge" style="margin: 2px; font-size: 11px;">${cat}</span>`

                                ).join('')}

                            </div>

                        </td>

                        <td style="font-size: 12px;">${comercio.mccsStr}</td>

                        <td style="text-align: center;">

                            <span style="font-weight: bold; color: ${comercio.registros > 1 ? '#28a745' : '#666'};">

                                ${comercio.registros}

                            </span>

                            ${comercio.registros > 1 ? '<br><small style="color: #28a745;">‚úì Acumulado</small>' : ''}

                        </td>

                        <td style="text-align: right; font-weight: bold;">${formatMoney(comercio.monto)}</td>

                        <td style="text-align: right;">${formatNumber(comercio.transacciones)}</td>

                        <td style="text-align: right;">

                            <div style="display: flex; align-items: center; gap: 10px;">

                                <span>${share.toFixed(3)}%</span>

                                <div class="share-bar" style="width: 60px;">

                                    <div class="share-fill" style="width: ${Math.min(share * 10, 100)}%"></div>

                                </div>

                            </div>

                        </td>

                        <td style="text-align: right; font-weight: bold;">${shareAcumulado.toFixed(2)}%</td>

                        <td style="text-align: right;">${formatMoney(ticketPromedio)}</td>

                    `;

                }

                

                tbody.appendChild(tr);

            });



            // Crear gr√°fica de concentraci√≥n

            createConcentrationChart(comerciosArray, totalMonto);



            // Actualizar informaci√≥n de concentraci√≥n

            const concentrationDiv = document.getElementById('concentrationInfo');

            const totalRFCsConValor = Object.keys(comerciosAgrupados).filter(k => !k.startsWith('SIN_RFC_')).length;

            const totalSinRFC = Object.keys(comerciosAgrupados).filter(k => k.startsWith('SIN_RFC_')).length;

            

            concentrationDiv.innerHTML = `

                <h4>üìä An√°lisis de Concentraci√≥n por ${groupMode === 'rfc' ? 'RFC' : 'Raz√≥n Social'}</h4>

                ${groupMode === 'rfc' ? `

                    <p>‚Ä¢ Total de RFCs √∫nicos con valor: <strong>${totalRFCsConValor}</strong></p>

                    <p>‚Ä¢ Registros sin RFC v√°lido: <strong>${totalSinRFC}</strong></p>

                ` : ''}

                <p>‚Ä¢ Los <strong>Top 10 ${groupMode === 'rfc' ? 'RFCs' : 'comercios'}</strong> representan el <strong>${

                    comerciosArray.slice(0, 10).reduce((sum, c) => sum + (c.monto / totalMonto) * 100, 0).toFixed(2)

                }%</strong> del volumen total</p>

                <p>‚Ä¢ Los <strong>Top 20 ${groupMode === 'rfc' ? 'RFCs' : 'comercios'}</strong> representan el <strong>${

                    comerciosArray.slice(0, 20).reduce((sum, c) => sum + (c.monto / totalMonto) * 100, 0).toFixed(2)

                }%</strong> del volumen total</p>

                <p>‚Ä¢ Los <strong>Top 50 ${groupMode === 'rfc' ? 'RFCs' : 'comercios'}</strong> representan el <strong>${shareTop50.toFixed(2)}%</strong> del volumen total</p>

                <p>‚Ä¢ Esto indica una ${shareTop50 > 80 ? 'alta' : shareTop50 > 60 ? 'moderada' : 'baja'} concentraci√≥n del volumen en pocos ${groupMode === 'rfc' ? 'contribuyentes' : 'comercios'}</p>

                ${groupMode === 'rfc' ? 

                    `<p>‚Ä¢ <strong>Importante:</strong> Cada RFC suma TODOS sus consumos, sin importar cu√°ntas sucursales o razones sociales tenga</p>

                     <p>‚Ä¢ <strong>Nota:</strong> Los registros sin RFC v√°lido aparecen como "SIN_RFC_[nombre]" y no se agrupan entre s√≠</p>` : 

                    `<p>‚Ä¢ <strong>Nota:</strong> Los comercios est√°n agrupados por raz√≥n social individual</p>`

                }

            `;

        }



        function createConcentrationChart(comerciosArray, totalMonto) {

            const ctx = document.getElementById('concentrationChart').getContext('2d');

            

            // Destruir gr√°fica anterior si existe

            if (window.concentrationChartInstance) {

                window.concentrationChartInstance.destroy();

            }

            

            // Preparar datos para la curva de concentraci√≥n

            const labels = comerciosArray.map((_, i) => i + 1);

            const shareAcumuladoData = [];

            let acumulado = 0;

            

            comerciosArray.forEach(comercio => {

                acumulado += (comercio.monto / totalMonto) * 100;

                shareAcumuladoData.push(acumulado);

            });



            window.concentrationChartInstance = new Chart(ctx, {

                type: 'line',

                data: {

                    labels: labels,

                    datasets: [{

                        label: 'Share Acumulado (%)',

                        data: shareAcumuladoData,

                        borderColor: '#007bff',

                        backgroundColor: 'rgba(0, 123, 255, 0.1)',

                        borderWidth: 3,

                        fill: true,

                        tension: 0.4,

                        pointRadius: 2,

                        pointHoverRadius: 5

                    }]

                },

                options: {

                    responsive: true,

                    maintainAspectRatio: false,

                    plugins: {

                        title: {

                            display: true,

                            text: 'Curva de Concentraci√≥n del Volumen de Ventas'

                        },

                        tooltip: {

                            callbacks: {

                                label: function(context) {

                                    const comercio = comerciosArray[context.dataIndex];

                                    const groupMode = document.getElementById('groupModeSelect').value;

                                    return [

                                        `${groupMode === 'rfc' ? comercio.rfc : comercio.razonSocialStr}`,

                                        `Share acumulado: ${context.parsed.y.toFixed(2)}%`,

                                        `Monto: ${formatMoney(comercio.monto)}`

                                    ];

                                }

                            }

                        }

                    },

                    scales: {

                        x: {

                            title: {

                                display: true,

                                text: 'Ranking'

                            }

                        },

                        y: {

                            title: {

                                display: true,

                                text: 'Share Acumulado (%)'

                            },

                            min: 0,

                            max: 100,

                            ticks: {

                                callback: function(value) {

                                    return value + '%';

                                }

                            }

                        }

                    }

                }

            });

        }



        function exportTop50ToCSV() {

            const table = document.getElementById('top50ShareTable');

            const rows = table.querySelectorAll('tr');

            let csv = [];

            

            // Headers

            const headers = [];

            rows[0].querySelectorAll('th').forEach(th => {

                headers.push('"' + th.textContent.replace(/"/g, '""') + '"');

            });

            csv.push(headers.join(','));

            

            // Data

            for (let i = 1; i < rows.length; i++) {

                const row = rows[i];

                const data = [];

                row.querySelectorAll('td').forEach(td => {

                    // Limpiar el texto de caracteres especiales y formatos

                    let text = td.textContent.trim();

                    text = text.replace(/[$,]/g, ''); // Remover s√≠mbolos de moneda y comas

                    data.push('"' + text.replace(/"/g, '""') + '"');

                });

                csv.push(data.join(','));

            }

            

            // Descargar

            const blob = new Blob([csv.join('\n')], { type: 'text/csv;charset=utf-8;' });

            const link = document.createElement('a');

            const url = URL.createObjectURL(blob);

            link.setAttribute('href', url);

            link.setAttribute('download', 'top50_comercios_share.csv');

            link.style.visibility = 'hidden';

            document.body.appendChild(link);

            link.click();

            document.body.removeChild(link);

        }



        function showRFCAnalysis() {

            const modal = document.getElementById('rfcAnalysisModal');

            const content = document.getElementById('rfcAnalysisContent');

            

            // Agrupar por RFC para an√°lisis

            const rfcAnalysis = {};

            processedData.forEach(row => {

                const rfcNormalizado = (row.RFC || '').toString().trim().toUpperCase();

                if (rfcNormalizado && rfcNormalizado !== 'N/A' && rfcNormalizado !== '') {

                    if (!rfcAnalysis[rfcNormalizado]) {

                        rfcAnalysis[rfcNormalizado] = {

                            rfc: rfcNormalizado,

                            razonesSociales: new Set(),

                            marcas: new Set(),

                            categorias: new Set(),

                            monto: 0,

                            transacciones: 0,

                            registros: 0

                        };

                    }

                    

                    const razonSocial = row['Razon _Social'] || row.razon_social;

                    if (razonSocial) rfcAnalysis[rfcNormalizado].razonesSociales.add(razonSocial);

                    if (row.MARCA) rfcAnalysis[rfcNormalizado].marcas.add(row.MARCA);

                    rfcAnalysis[rfcNormalizado].categorias.add(row.category);

                    rfcAnalysis[rfcNormalizado].monto += row.monto;

                    rfcAnalysis[rfcNormalizado].transacciones += row.transacciones;

                    rfcAnalysis[rfcNormalizado].registros++;

                }

            });

            

            // Convertir a array y ordenar

            const rfcArray = Object.values(rfcAnalysis)

                .sort((a, b) => b.monto - a.monto)

                .slice(0, 20);

            

            let html = `

                <h4>Top 20 RFC con Mayor Consumo Acumulado</h4>

                <table style="width: 100%; margin-top: 20px;">

                    <thead>

                        <tr>

                            <th>RFC</th>

                            <th>Razones Sociales</th>

                            <th>Consumo Total</th>

                            <th>Transacciones</th>

                            <th>Registros</th>

                        </tr>

                    </thead>

                    <tbody>

            `;

            

            rfcArray.forEach(rfc => {

                html += `

                    <tr>

                        <td style="font-weight: bold;">${rfc.rfc}</td>

                        <td>${Array.from(rfc.razonesSociales).join('<br>')}</td>

                        <td style="text-align: right; font-weight: bold;">${formatMoney(rfc.monto)}</td>

                        <td style="text-align: right;">${formatNumber(rfc.transacciones)}</td>

                        <td style="text-align: center;">${rfc.registros}</td>

                    </tr>

                `;

            });

            

            html += '</tbody></table>';

            content.innerHTML = html;

            modal.style.display = 'block';

        }

        

        function closeRFCAnalysis() {

            document.getElementById('rfcAnalysisModal').style.display = 'none';

        }



        function showTab(tabName) {

            // Ocultar todos los tabs

            document.querySelectorAll('.tab-content').forEach(tab => {

                tab.classList.remove('active');

            });

            document.querySelectorAll('.tab').forEach(tab => {

                tab.classList.remove('active');

            });



            // Mostrar el tab seleccionado

            document.getElementById(tabName).classList.add('active');

            event.target.classList.add('active');

        }



        function filterTable(tableId, searchTerm) {

            const table = document.getElementById(tableId);

            const rows = table.getElementsByTagName('tr');

            const search = searchTerm.toLowerCase();



            for (let i = 1; i < rows.length; i++) {

                const row = rows[i];

                const text = row.textContent.toLowerCase();

                row.style.display = text.includes(search) ? '' : 'none';

            }

        }

    </script>

</body>

</html>
